import json
import pickle
from flask_socketio import SocketIO, emit
from typing import Callable
from flask import Flask
from flask import render_template
import sqlite3

import numpy as np

app = Flask(__name__)
app.config["SECRET_KEY"] = "secret!"
socketio = SocketIO(app)
model = pickle.load(open("models/robust.bin", "rb"))
con = sqlite3.connect("main_base.db")
cur = con.cursor()
last_pred = {}


@app.route("/")
def main_page() -> Callable:
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞, —Ä–µ–Ω–¥–µ—Ä —à–∞–±–ª–æ–Ω–∞"""
    return render_template("main.html")


@app.route("/reseach")
def jupyter_page() -> Callable:
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å jupyter-—Ç–µ—Ç—Ä–∞–¥–∫–æ–π (–ø—Ä–æ—Å–º–æ—Ç—Ä)"""
    return render_template("reseach.html")


@socketio.on("predict")
def predict(data: str):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è

    Args:
        data (str): —Å–µ—Ä–∏–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π json —Å –¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è

    Notes:
        –ü–æ-—Ö–æ—Ä–æ—à–µ–º—É, web-api –¥–æ–ª–∂–µ–Ω –¥–∞–ª—å—à–µ –ø—Ä–æ–∫–∏–¥—ã–≤–∞—Ç—å –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã—á–∏—Å–ª–∏—Ç–µ–ª—å–Ω—ã–µ –∏–Ω—Ñ–µ—Ä–µ–Ω—Å—ã, –Ω–æ —ç—Ç–æ –∂–µ–∂ —É—á–µ–±–Ω—ã–π –ø—Ä–∏–º–µ—Ä üòê
    """

    input_vector = np.zeros(9 * 2)
    for idx, item in enumerate(json.loads(data["data"]).values()):
        try:
            input_vector[idx] = float(item)
        except:
            input_vector[idx] = 0
            input_vector[idx + 9] = 1

    result = model.predict_proba(input_vector.reshape((1, -1)))

    global last_pred
    last_pred = {"input": input_vector.tolist(), "pred": np.argmax(result[0])}
    emit("prediction_result", {"result": result[0].tolist()})


@socketio.on("get_train_sample")
def get_train_sample(data: str):
    """–ó–∞–ø—Ä–æ—Å –Ω–∞ –æ–±—Ä–∞–∑–µ—Ü –∏–∑ –±–∞–∑—ã

    Args:
        data (str): –ø—É—Å—Ç–∞—è —Å—Ä–æ–∫–∞
    """

    res = cur.execute("SELECT * FROM train_data ORDER BY RANDOM() LIMIT 1;")
    res = res.fetchall()[0]

    emit(
        "from_train_base",
        {
            "ph": res[0],
            "Hardness": res[1],
            "Solids": res[2],
            "Chloramines": res[3],
            "Sulfate": res[4],
            "Conductivity": res[5],
            "Organic_carbon": res[6],
            "Trihalomethanes": res[7],
            "Turbidity": res[8],
        },
    )


@socketio.on("send_answer")
def write_to_base(data: str):
    """–ó–∞–ø–∏—Å—å –≤ –±–∞–∑—É –Ω–æ–≤–æ–≥–æ –≤–µ–∫—Ç–æ—Ä–∞

    Args:
        data (str): –≤–µ—Ä–Ω–æ –∏–ª–∏ –Ω–µ –≤–µ—Ä–Ω–æ –ø—Ä–∏–¥–µ—Ç —Å —Ñ—Ä–æ–Ω—Ç–∞
    """
    if json.loads(data["data"]):
        pred = last_pred["pred"]
    else:
        pred = int(not bool(last_pred["pred"]))

    input_data = last_pred["input"][:9] + [pred] + last_pred["input"][9:]
    query = "INSERT INTO train_data VALUES (" + ", ".join(map(str, input_data)) + ") "
    cur.execute(query)
    con.commit()


if __name__ == "__main__":
    socketio.run(app, host="0.0.0.0", port=8080)
